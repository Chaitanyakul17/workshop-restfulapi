<?php

/**
 * @file
 * This module add node tags.
 */

use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Client;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_presave().
 */
function intelligent_tools_text_summarize_node_presave(EntityInterface $node) {
  $config = \Drupal::config('intelligent_tools.settings');
  $flag = FALSE;
  $content_type_node = $config->get('intelligent_tools_text_summarize_content');
  $address_web = $config->get('intelligent_tools_text_summarize_ip');
  $content_type_node = strtolower($content_type_node);
  $content_type_node_array = explode(" ", $content_type_node);
  $content_type_field = $config->get('intelligent_tools_text_summarize_field');
  $content_type_field_array = explode(" ", $content_type_field);
  $node_main_flag = FALSE;
  foreach ($content_type_node_array as $key => $value) {
    if (($node_main_flag == FALSE)&&($node->getType() == $value)) {
      $node_main_flag = TRUE;
      $main_key = $key;
    }
  }
  $content_type_field = $content_type_field_array[$main_key];
  if ($node_main_flag == TRUE) {
    $body = $node->get($content_type_field)->getValue()[0]['value'];
    $temp = summary_api($body, $address_web);
    $node->set('body', [
      'summary' => $temp['summ'],
      'value' => $node->get('body')->value,
      'format' => $node->get('body')->format,
    ]);
  }
}

/**
 * Separate summary api function.
 */
function summary_api($body, $address_web) {
  try {
    $client = new Client(['base_uri' => $address_web]);
    $response = $client->request('POST', '', [
      'form_params' => [
        'text' => $body,
      ],
    ]);
    $temp_json = json_decode($response->getBody()->getContents());
  }
  catch (GuzzleException $e) {
    \Drupal::logger('intelligent_tools')->error($e->getMessage());
    $resp = $e->getResponse();
    if (isset($resp)) {
      if ($resp->getStatusCode() == 400) {
        \Drupal::messenger()->addError('Not enough sentences found. There must be at least 5 sentences for summary.');
      }
    }
    else {
      \Drupal::messenger()->addError($e->getMessage());
    }
  }
  foreach ($temp_json as $key => $value) {
    $temp = $value;
  }
  return ['summ' => $temp];
}
